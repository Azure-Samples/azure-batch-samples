<Window x:Name="window" x:Class="Microsoft.Azure.BatchExplorer.Views.MainView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:viewModels="clr-namespace:Microsoft.Azure.BatchExplorer.ViewModels"
        xmlns:converters="clr-namespace:Microsoft.Azure.BatchExplorer.Converters"
        xmlns:models="clr-namespace:Microsoft.Azure.BatchExplorer.Models"
        xmlns:common="clr-namespace:Microsoft.Azure.Batch.Common;assembly=Microsoft.Azure.Batch"
        xmlns:toolkit="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:datagrid="http://schemas.xceed.com/wpf/xaml/datagrid"
        mc:Ignorable="d"
        Title="{Binding TitleString}" 
        Height="800" Width="1200" d:DataContext="{d:DesignInstance Type=viewModels:MainViewModel, IsDesignTimeCreatable=True}">
    <Window.Resources>
        <converters:TaskStatusColorConverter x:Key="TaskStatusColorConverter"/>
        <converters:JobStateColorConverter x:Key="JobStateColorConverter"/>
        <converters:JobScheduleStateColorConverter x:Key="JobScheduleStateColorConverter"/>
        <converters:PoolAllocationStateColorConverter x:Key="PoolAllocationStateColorConverter"/>
        <converters:NullToVisibilityConverter x:Key="NVC"/>
        <converters:BoolToVisibilityConverter x:Key="BVC"/>
        <converters:IsNotNullToBooleanConverter x:Key="IsNotNullToBooleanConverter"/>
        <converters:InvertedBoolToVisibilityConverter x:Key="IBVC"/>
        <converters:BooleanAndConverter x:Key="BAC"/>
        <converters:EnumToStringConverter x:Key="EnumToStringConverter"/>
        <Style TargetType="DataGrid">
            <Setter Property="IsReadOnly" Value="True"/>
            <Setter Property="AutoGenerateColumns" Value="False"/>
            <Setter Property="SelectionMode" Value="Single"/>
            <Setter Property="CanUserReorderColumns" Value="True"/>
            <Setter Property="CanUserResizeColumns" Value="True"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="RowHeaderWidth" Value="0"/>
            <Setter Property="GridLinesVisibility" Value="None"/>
            <Setter Property="BorderThickness" Value="0"/>
        </Style>
        <Style TargetType="DataGridCell">
            <Setter Property="BorderThickness" Value="0"/>
        </Style>
        <Style TargetType="TextBlock">
            <Setter Property="TextAlignment" Value="Left"/>
        </Style>
        <Style TargetType="{x:Type Button}">
            <Setter Property="Background" Value="White" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="SnapsToDevicePixels" Value="True" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="0" Background="{TemplateBinding Background}" x:Name="Content">
                            <Grid>
                                <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                            </Grid>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="DarkGray" />
                                <Setter Property="Foreground" Value="White" />
                            </Trigger>

                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="LightBlue" />
                                <Setter Property="Foreground" Value="White" />
                            </Trigger>

                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Content" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ResourceDictionary x:Key="TreeViewTemplates">
            <DataTemplate DataType="{x:Type models:SimplePropertyModel}">
                <TextBlock>
                    <Run Text="{Binding PropertyName, Mode=OneWay}" FontWeight="Bold" />
                    <Run Text=": " />
                    <Run Text="{Binding PropertyValue, Mode=OneWay}" />
                </TextBlock>
            </DataTemplate>
            <HierarchicalDataTemplate DataType="{x:Type models:CollectionPropertyModel}" ItemsSource="{Binding Items}">
                <TextBlock>
                    <Run Text="{Binding PropertyName, Mode=OneWay}" FontWeight="Bold" />
                </TextBlock>
            </HierarchicalDataTemplate>
        </ResourceDictionary>
        <CommandBinding x:Key="TreeViewCopyCommand" 
                        Command="ApplicationCommands.Copy" 
                        CanExecute="TreeViewCopyCommandBinding_CanExecute" 
                        Executed="TreeViewCopyCommandBinding_Executed"/>

        <Style x:Key="TreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
            <Setter Property="IsExpanded" Value="True"/>
        </Style>

        <Style x:Key="ConnectAccountMenuItemStyle" TargetType="MenuItem">
            <Setter Property="Header" Value="{Binding Alias}"/>
            <Setter Property="Command" Value="{Binding DataContext.ConnectAccount, 
                                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=MenuItem, AncestorLevel=2}}"/>
            <Setter Property="CommandParameter" Value="{Binding}"/>
        </Style>
        <Style x:Key="EditAccountMenuItemStyle" TargetType="MenuItem">
            <Setter Property="Header" Value="{Binding Alias}"/>
            <Setter Property="Command" Value="{Binding DataContext.EditAccount, 
                                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=MenuItem, AncestorLevel=2}}"/>
            <Setter Property="CommandParameter" Value="{Binding}"/>
        </Style>
        <Style x:Key="DeleteAccountMenuItemStyle" TargetType="MenuItem">
            <Setter Property="Header" Value="{Binding Alias}"/>
            <Setter Property="Command" Value="{Binding DataContext.DeleteAccount, 
                                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=MenuItem, AncestorLevel=2}}"/>
            <Setter Property="CommandParameter" Value="{Binding}"/>
        </Style>

        <ControlTemplate x:Key="PoolCommands">
            <StackPanel
                Orientation="Vertical">
                <StackPanel
                    Orientation="Horizontal">
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding RefreshItem}"
                        CommandParameter="{Binding SelectedPool}"
                        IsEnabled="{Binding IsAccountConnected, NotifyOnSourceUpdated=True}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/refresh.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Refresh" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding ResizePool}"
                        CommandParameter="{Binding SelectedPool}"
                        IsEnabled="{Binding IsAccountConnected, NotifyOnSourceUpdated=True}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/feature.settings.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Resize" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding ShowHeatMap}"
                        CommandParameter="{Binding SelectedPool}"
                        IsEnabled="{Binding IsAccountConnected, NotifyOnSourceUpdated=True}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/feature.heatmap.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Heatmap" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding Delete}"
                        CommandParameter="{Binding SelectedPool}"
                        IsEnabled="{Binding IsAccountConnected, NotifyOnSourceUpdated=True}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/delete.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Delete" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                </StackPanel>
                <TextBlock HorizontalAlignment="Center" Text="Pool Commands" FontSize="12" Foreground="Gray" FontWeight="Bold" />
            </StackPanel>
        </ControlTemplate>

        <ControlTemplate x:Key="ComputeNodeCommands">
            <StackPanel
                Orientation="Vertical">
                <StackPanel
                    Orientation="Horizontal">
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding OpenRDP}"
                        CommandParameter="{Binding SelectedComputeNode}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/share.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Connect" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding AddComputeNodeUser}"
                        CommandParameter="{Binding SelectedComputeNode}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/add.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Add User" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                </StackPanel>
                <TextBlock HorizontalAlignment="Center" Text="Node Commands" FontSize="12" Foreground="Gray" FontWeight="Bold" />
            </StackPanel>
        </ControlTemplate>

        <ControlTemplate x:Key="ComputeTaskCommands">
            <StackPanel
                Orientation="Vertical">
                <StackPanel
                    Orientation="Horizontal">
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding EnableSchedulingComputeNode}"
                        CommandParameter="{Binding SelectedComputeNode}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/check.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Enable" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                        <Button.ToolTip>
                            <TextBlock>Enables task scheulding on this node</TextBlock>
                        </Button.ToolTip>
                    </Button>
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding DisableSchedulingComputeNode}"
                        CommandParameter="{Binding SelectedComputeNode}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/cancel.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Disable" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                        <Button.ToolTip>
                            <TextBlock>Disables future tasks from being scheulded to this node</TextBlock>
                        </Button.ToolTip>
                    </Button>
                </StackPanel>
                <TextBlock HorizontalAlignment="Center" Text="Task Scheduling" FontSize="12" Foreground="Gray" FontWeight="Bold" />
            </StackPanel>
        </ControlTemplate>

        <ControlTemplate x:Key="JobCommands">
            <StackPanel
                Orientation="Vertical">
                <StackPanel
                    Orientation="Horizontal">
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding RefreshItem}"
                        CommandParameter="{Binding SelectedJob}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/refresh.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Refresh" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding SelectedJob.EnableJob}"
                        CommandParameter="{Binding SelectedJob}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/check.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Enable" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding SelectedJob.DisableJob}"
                        CommandParameter="{Binding SelectedJob}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/cancel.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Disable" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding SelectedJob.AddTask}"
                        CommandParameter="{Binding SelectedJob}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/add.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Add Task" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding Delete}"
                        CommandParameter="{Binding SelectedJob}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/delete.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Delete" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                </StackPanel>
                <TextBlock HorizontalAlignment="Center" Text="Job Commands" FontSize="12" Foreground="Gray" FontWeight="Bold" />
            </StackPanel>

        </ControlTemplate>

        <ControlTemplate x:Key="TaskCommands">
            <StackPanel
                Orientation="Vertical">
                <StackPanel
                    Orientation="Horizontal">
                    <Button
                        Margin="4"
                        Width="52"
                        Command="{Binding Terminate}"
                        CommandParameter="{Binding SelectedTask}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/cancel.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Terminate" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding Delete}"
                        CommandParameter="{Binding SelectedTask}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/delete.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Delete" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                </StackPanel>
                <TextBlock HorizontalAlignment="Center" Text="Task Commands" FontSize="12" Foreground="Gray" FontWeight="Bold" />
            </StackPanel>
        </ControlTemplate>

        <ControlTemplate x:Key="JobScheduleCommands">
            <StackPanel
                Orientation="Vertical">
                <StackPanel
                    Orientation="Horizontal">
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding RefreshItem}"
                        CommandParameter="{Binding SelectedJobSchedule}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/refresh.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Refresh" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding SelectedJobSchedule.EnableJobSchedule}"
                        CommandParameter="{Binding SelectedJobSchedule}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/check.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Enable" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding SelectedJobSchedule.DisableJobSchedule}"
                        CommandParameter="{Binding SelectedJob}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/cancel.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Disable" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding SelectedJobSchedule.Delete}"
                        CommandParameter="{Binding SelectedJobSchedule}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/delete.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Delete" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                </StackPanel>
                <TextBlock HorizontalAlignment="Center" Text="Job Schedule Commands" FontSize="12" Foreground="Gray" FontWeight="Bold"/>
            </StackPanel>

        </ControlTemplate>

        <ControlTemplate x:Key="CertificateCommands">
            <StackPanel
                Orientation="Vertical">
                <StackPanel
                    Orientation="Horizontal">
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding RefreshItem}"
                        CommandParameter="{Binding SelectedCertificate}"
                        IsEnabled="{Binding IsAccountConnected, NotifyOnSourceUpdated=True}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/refresh.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Refresh" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                    <Button
                        Margin="4"
                        Width="48"
                        Command="{Binding Delete}"
                        CommandParameter="{Binding SelectedCertificate}"
                        IsEnabled="{Binding IsAccountConnected, NotifyOnSourceUpdated=True}">
                        <Button.Content>
                            <StackPanel>
                                <Image Source="../Images/delete.png" Height="36"/>
                                <TextBlock HorizontalAlignment="Center" Text="Delete" FontSize="12" Foreground="Black" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                </StackPanel>
                <TextBlock HorizontalAlignment="Center" Text="Certificate Commands" FontSize="12" Foreground="Gray" FontWeight="Bold" />
            </StackPanel>
        </ControlTemplate>

    </Window.Resources>
    <Grid x:Name="MainGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="28"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="4"/>
            <RowDefinition Height="96"/>
        </Grid.RowDefinitions>
        <Menu HorizontalAlignment="Stretch"  IsMainMenu="True">

            <MenuItem Header="_File">
                <MenuItem Header="Exit" Command="{Binding Exit}"/>
            </MenuItem>
            <MenuItem Header="_Accounts">
                <MenuItem Header="_Add" HorizontalAlignment="Stretch" ItemsSource="{Binding AccountManagers}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="MenuItem">
                            <Setter 
                            Property="Command"
                            Value="{Binding DataContext.AddAccount, 
                                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=MenuItem, AncestorLevel=1}}"/>
                            <Setter Property="CommandParameter" Value="{Binding}"/>
                            <Setter Property="Header" Value="{Binding Metadata.Name}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <MenuItem Header="_Connect" 
                          ItemsSource="{Binding AccountManagers}"
                          HorizontalAlignment="Stretch"
                          >
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="MenuItem">
                            <Setter Property="Header" Value="{Binding Metadata.Name}"/>
                            <Setter Property="IsEnabled" Value="{Binding AccountManager.HasAccounts, NotifyOnSourceUpdated=True}"/>
                            <Setter Property="ItemsSource" Value="{Binding AccountManager.Accounts}"/>
                            <Setter Property="ItemContainerStyle" Value="{StaticResource ConnectAccountMenuItemStyle}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <MenuItem Header="_Edit" 
                          ItemsSource="{Binding AccountManagers}"
                          HorizontalAlignment="Stretch"
                          >
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="MenuItem">
                            <Setter Property="Header" Value="{Binding Metadata.Name}"/>
                            <Setter Property="IsEnabled">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource BAC}">
                                        <Binding Path="AccountManager.HasAccounts" NotifyOnSourceUpdated="True"/>
                                        <Binding Path="AccountManager.CanEditAccount" NotifyOnSourceUpdated="True"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="ItemsSource" Value="{Binding AccountManager.Accounts}"/>
                            <Setter Property="ItemContainerStyle" Value="{StaticResource EditAccountMenuItemStyle}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <MenuItem Header="_Delete"
                          ItemsSource="{Binding AccountManagers}"
                          HorizontalAlignment="Stretch"
                          >
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="MenuItem">
                            <Setter Property="Header" Value="{Binding Metadata.Name}"/>
                            <Setter Property="IsEnabled">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource BAC}">
                                        <Binding Path="AccountManager.HasAccounts" NotifyOnSourceUpdated="True"/>
                                        <Binding Path="AccountManager.CanDeleteAccount" NotifyOnSourceUpdated="True"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="ItemsSource" Value="{Binding AccountManager.Accounts}"/>
                            <Setter Property="ItemContainerStyle" Value="{StaticResource DeleteAccountMenuItemStyle}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
            </MenuItem>

            <MenuItem Header="_Tools" IsEnabled="{Binding IsAccountConnected, NotifyOnSourceUpdated=True}">
                <MenuItem Header="Create Job _Schedule" Command="{Binding CreateJobSchedule}" HorizontalAlignment="Stretch" />
                <MenuItem Header="Create _Job" Command="{Binding CreateJob}" HorizontalAlignment="Stretch" />
                <MenuItem Header="Create _Pool" Command="{Binding CreatePool}" HorizontalAlignment="Stretch" />
            </MenuItem>

            <MenuItem Header="_Refresh" IsEnabled="{Binding IsAccountConnected, NotifyOnSourceUpdated=True}">
                <MenuItem Header="Refresh Job _Schedules" Command="{Binding RefreshJobSchedules}" HorizontalAlignment="Stretch"/>
                <MenuItem Header="Refresh _Jobs" Command="{Binding RefreshJobs}" HorizontalAlignment="Stretch"/>
                <MenuItem Header="Refresh _Pools" Command="{Binding RefreshPools}" HorizontalAlignment="Stretch"/>
                <MenuItem Header="Refresh _Certificates" Command="{Binding RefreshCertificates}" HorizontalAlignment="Stretch"/>
                <MenuItem Header="_Refresh All" Command="{Binding RefreshAll}" HorizontalAlignment="Stretch"/>
            </MenuItem>

            <MenuItem Header="_Options">
                <MenuItem Header="_Edit options" 
                          Command="{Binding ViewOptionsDialog}"/>
            </MenuItem>

            <MenuItem Header="_Help">
                <MenuItem Header="About" Command="{Binding ShowAboutDialog}"/>
            </MenuItem>

        </Menu>
        <Grid HorizontalAlignment="Stretch" Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <TabControl x:Name="LeftHandTab">
                <TabItem Header="{Binding JobScheduleTabTitle}" IsSelected="{Binding JobScheduleTabIsSelected}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <StackPanel Grid.Row="0" Orientation="Horizontal">
                            <Button Margin="4" Width="48" Command="{Binding CreateJobSchedule}" IsEnabled="{Binding IsAccountConnected, NotifyOnSourceUpdated=True}">
                                <Button.Content>
                                    <StackPanel>
                                        <Image Source="../Images/add.png" Height="36" />
                                        <TextBlock HorizontalAlignment="Center" Text="Add" FontSize="12" Foreground="Black" />
                                    </StackPanel>
                                </Button.Content>
                            </Button>
                            <Button Margin="4" Width="48" Command="{Binding RefreshJobSchedules}" IsEnabled="{Binding IsAccountConnected, NotifyOnSourceUpdated=True}">
                                <Button.Content>
                                    <StackPanel>
                                        <Image Source="../Images/refresh.png" Height="36" />
                                        <TextBlock HorizontalAlignment="Center" Text="Refresh" FontSize="12" Foreground="Black" />
                                    </StackPanel>
                                </Button.Content>
                            </Button>
                        </StackPanel>
                        <DataGrid Grid.Row="1" ItemsSource="{Binding JobSchedules}" SelectedItem="{Binding SelectedJobSchedule}">
                            <DataGrid.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Refresh" Command="{Binding SelectedJobSchedule.RefreshItem}" CommandParameter="{Binding SelectedJobSchedule}" />
                                    <MenuItem Header="Enable" Command="{Binding SelectedJobSchedule.EnableJobSchedule}" CommandParameter="{Binding SelectedJobSchedule}" />
                                    <MenuItem Header="Terminate" Command="{Binding SelectedJobSchedule.TerminateJobSchedule}" CommandParameter="{Binding SelectedJobSchedule}" />
                                    <MenuItem Header="Disable" Command="{Binding SelectedJobSchedule.DisableJobSchedule}" CommandParameter="{Binding SelectedJobSchedule}" />
                                    <MenuItem Header="Delete" Command="{Binding SelectedJobSchedule.Delete}" CommandParameter="{Binding SelectedJobSchedule}" />
                                </ContextMenu>
                            </DataGrid.ContextMenu>
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="Id" Binding="{Binding Id}" />
                                <DataGridTextColumn Header="Display Name" Binding="{Binding DisplayName}" />
                                <DataGridTextColumn Header="State" Binding="{Binding State}">
                                    <DataGridTextColumn.CellStyle>
                                        <Style TargetType="DataGridCell">
                                            <Setter Property="Foreground" Value="{Binding State, Converter={StaticResource JobScheduleStateColorConverter}}" />
                                            <Setter Property="FontWeight" Value="Bold" />
                                            <Setter Property="Background" Value="White" />
                                        </Style>
                                    </DataGridTextColumn.CellStyle>
                                </DataGridTextColumn>
                                <DataGridTextColumn Header="" Width="*" CanUserReorder="False" CanUserSort="False" />
                            </DataGrid.Columns>
                        </DataGrid>
                    </Grid>
                </TabItem>
                <TabItem Header="{Binding JobTabTitle}" IsSelected="{Binding JobTabIsSelected}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <DockPanel LastChildFill="True">
                            <Button
                                Margin="4"
                                Width="48"
                                DockPanel.Dock="Left"
                                Command="{Binding CreateJob}"
                                IsEnabled="{Binding IsAccountConnected, NotifyOnSourceUpdated=True}">
                                <Button.Content>
                                    <StackPanel>
                                        <Image Source="../Images/add.png" Height="36"/>
                                        <TextBlock HorizontalAlignment="Center" Text="Add" FontSize="12" Foreground="Black" />
                                    </StackPanel>
                                </Button.Content>
                            </Button>
                            <Button
                                Margin="4"
                                Width="48"
                                DockPanel.Dock="Left"
                                Command="{Binding RefreshJobs}"
                                IsEnabled="{Binding IsAccountConnected, NotifyOnSourceUpdated=True}">
                                <Button.Content>
                                    <StackPanel>
                                        <Image Source="../Images/refresh.png" Height="36"/>
                                        <TextBlock HorizontalAlignment="Center" Text="Refresh" FontSize="12" Foreground="Black" />
                                    </StackPanel>
                                </Button.Content>
                            </Button>
                            <Button
                                Margin="4"
                                Width="48"
                                DockPanel.Dock="Left"
                                Command="{Binding DeleteSelectedJobs}"
                                IsEnabled="{Binding IsAccountConnected, NotifyOnSourceUpdated=True}">
                                <Button.Content>
                                    <StackPanel>
                                        <Image Source="../Images/delete.png" Height="36"/>
                                        <TextBlock HorizontalAlignment="Center" Text="Delete" FontSize="12" Foreground="Black" />
                                    </StackPanel>
                                </Button.Content>
                            </Button>
                            <TextBox x:Name="SearchJobsTxtBox" 
                                     Height="48"
                                     Margin="20,20,0,0" 
                                     TextWrapping="Wrap" 
                                     Text="Search Jobs" 
                                     DockPanel.Dock="Right" 
                                     VerticalAlignment="Center" 
                                     Width="400"
                                     GotFocus="SearchJobsTxtBox_GotFocus" 
                                     KeyUp="SearchJobsTxtBox_KeyUp" />
                        </DockPanel>
                        <DataGrid
                            Grid.Row="1"
                            ItemsSource="{Binding Jobs}"
                            SelectedItem="{Binding SelectedJob}"
                            Margin="20,0">
                            <DataGrid.ContextMenu>
                                <ContextMenu>
                                    <MenuItem 
                                        Header="Refresh"
                                        Command="{Binding SelectedJob.RefreshItem}"
                                        CommandParameter="{Binding SelectedJob}" />
                                    <MenuItem 
                                        Header="Enable"
                                        Command="{Binding SelectedJob.EnableJob}"
                                        CommandParameter="{Binding SelectedJob}"/>
                                    <MenuItem 
                                        Header="Terminate"
                                        Command="{Binding SelectedJob.TerminateJob}"
                                        CommandParameter="{Binding SelectedJob}"/>
                                    <MenuItem Header="Disable">
                                        <MenuItem 
                                            Header="Requeue Tasks"
                                            Command="{Binding SelectedJob.DisableJob}"
                                            CommandParameter="{x:Static common:DisableJobOption.Requeue}"/>
                                        <MenuItem
                                            Header="Terminate Tasks"
                                            Command="{Binding SelectedJob.DisableJob}"
                                            CommandParameter="{x:Static common:DisableJobOption.Terminate}"/>
                                        <MenuItem 
                                            Header="Wait for Tasks"
                                            Command="{Binding SelectedJob.DisableJob}"
                                            CommandParameter="{x:Static common:DisableJobOption.Wait}"/>
                                    </MenuItem>
                                    <MenuItem 
                                        Header="Delete"
                                        Command="{Binding SelectedJob.Delete}"
                                        CommandParameter="{Binding SelectedJob}"/>
                                    <MenuItem 
                                        Header="Add Task"
                                        Command="{Binding SelectedJob.AddTask}"
                                        CommandParameter="{Binding SelectedJob}"/>
                                </ContextMenu>
                            </DataGrid.ContextMenu>
                            <DataGrid.Columns>
                                <DataGridTemplateColumn>
                                    <DataGridTemplateColumn.Header>
                                        <CheckBox x:Name="selectAllJob" Command="{Binding DataContext.SelectAllJobs, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}}" CommandParameter="{Binding IsChecked, ElementName=selectAllJob}"/>
                                    </DataGridTemplateColumn.Header>
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <CheckBox IsChecked="{Binding IsChecked, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" HorizontalAlignment="Center" />
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTextColumn Header="Id" Binding="{Binding Id}"/>
                                <DataGridTextColumn Header="Display Name" Binding="{Binding DisplayName}"/>
                                <DataGridTextColumn Header="State" Binding="{Binding State}">
                                    <DataGridTextColumn.CellStyle>
                                        <Style TargetType="DataGridCell">
                                            <Setter Property="Foreground" Value="{Binding State, Converter={StaticResource JobStateColorConverter}}"/>
                                            <Setter Property="FontWeight" Value="Bold"/>
                                            <Setter Property="Background" Value="White"/>
                                        </Style>
                                    </DataGridTextColumn.CellStyle>
                                </DataGridTextColumn>
                                <DataGridTextColumn Header="" Width="*" CanUserReorder="False" CanUserSort="False"/>
                            </DataGrid.Columns>
                        </DataGrid>
                    </Grid>

                </TabItem>
                <TabItem Header="{Binding PoolTabTitle}" IsSelected="{Binding PoolTabIsSelected}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <StackPanel
                            Grid.Row="0"
                            Orientation="Horizontal">
                            <Button
                                Margin="4"
                                Width="48"
                                Command="{Binding CreatePool}"
                                IsEnabled="{Binding IsAccountConnected, NotifyOnSourceUpdated=True}">
                                <Button.Content>
                                    <StackPanel>
                                        <Image Source="../Images/add.png" Height="36"/>
                                        <TextBlock HorizontalAlignment="Center" Text="Add" FontSize="12" Foreground="Black" />
                                    </StackPanel>
                                </Button.Content>
                            </Button>
                            <Button
                                Margin="4"
                                Width="48"
                                Command="{Binding RefreshPools}"
                                IsEnabled="{Binding IsAccountConnected, NotifyOnSourceUpdated=True}">
                                <Button.Content>
                                    <StackPanel>
                                        <Image Source="../Images/refresh.png" Height="36"/>
                                        <TextBlock HorizontalAlignment="Center" Text="Refresh" FontSize="12" Foreground="Black" />
                                    </StackPanel>
                                </Button.Content>
                            </Button>
                        </StackPanel>
                        <DataGrid
                            Grid.Row="1"
                            ItemsSource="{Binding Pools}"
                            SelectedItem="{Binding SelectedPool}">
                            <DataGrid.InputBindings>
                                <KeyBinding Command="{Binding RefreshPools}" Key="F5" />
                            </DataGrid.InputBindings>
                            <DataGrid.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Refresh"
                                              Command="{Binding RefreshItem}"
                                              CommandParameter="{Binding SelectedPool}" />
                                    <MenuItem Header="Resize"
                                              Command="{Binding ResizePool}"
                                              CommandParameter="{Binding SelectedPool}" />
                                    <MenuItem Header="Stop resize"
                                              Command="{Binding StopResizePool}"
                                              CommandParameter="{Binding SelectedPool}" />
                                    <MenuItem Header="Delete"
                                              Command="{Binding Delete}"
                                              CommandParameter="{Binding SelectedPool}"/>
                                    <MenuItem Header="Show heat map"
                                              Command="{Binding ShowHeatMap}"
                                              CommandParameter="{Binding SelectedPool}"/>
                                </ContextMenu>
                            </DataGrid.ContextMenu>
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="Id" Binding="{Binding Id}"/>
                                <DataGridTextColumn Header="State" Binding="{Binding State}"/>
                                <DataGridTextColumn Header="Current Dedicated" Binding="{Binding CurrentDedicated}"/>
                                <DataGridTextColumn Header="Current Low Priority" Binding="{Binding CurrentLowPriority}"/>
                                <DataGridTextColumn Header="Allocation State" Binding="{Binding AllocationState}">
                                    <DataGridTextColumn.CellStyle>
                                        <Style TargetType="DataGridCell">
                                            <Setter Property="Foreground" Value="{Binding AllocationState, Converter={StaticResource PoolAllocationStateColorConverter}}"/>
                                            <Setter Property="FontWeight" Value="Bold"/>
                                            <Setter Property="Background" Value="White"/>
                                        </Style>
                                    </DataGridTextColumn.CellStyle>
                                </DataGridTextColumn>
                                <DataGridTextColumn Header="VM Size" Binding="{Binding VirtualMachineSize}"/>

                                <DataGridTextColumn Header="" Width="*" 
                                                    CanUserReorder="False" CanUserSort="False"/>
                            </DataGrid.Columns>
                        </DataGrid>
                    </Grid>

                </TabItem>
                <TabItem Header="{Binding CertificatesTabTitle}" IsSelected="{Binding CertificatesTabIsSelected}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <StackPanel
                            Grid.Row="0"
                            Orientation="Horizontal">
                            <Button
                                Margin="4"
                                Width="48"
                                Command="{Binding CreateCertificate}"
                                IsEnabled="{Binding IsAccountConnected, NotifyOnSourceUpdated=True}">
                                <Button.Content>
                                    <StackPanel>
                                        <Image Source="../Images/add.png" Height="36"/>
                                        <TextBlock HorizontalAlignment="Center" Text="Add" FontSize="12" Foreground="Black" />
                                    </StackPanel>
                                </Button.Content>
                            </Button>
                            <Button
                                Margin="4"
                                Width="48"
                                Command="{Binding RefreshCertificates}"
                                IsEnabled="{Binding IsAccountConnected, NotifyOnSourceUpdated=True}">
                                <Button.Content>
                                    <StackPanel>
                                        <Image Source="../Images/refresh.png" Height="36"/>
                                        <TextBlock HorizontalAlignment="Center" Text="Refresh" FontSize="12" Foreground="Black" />
                                    </StackPanel>
                                </Button.Content>
                            </Button>
                        </StackPanel>
                        <DataGrid
                            Grid.Row="1"
                            ItemsSource="{Binding Certificates}"
                            SelectedItem="{Binding SelectedCertificate}">
                            <DataGrid.InputBindings>
                                <KeyBinding Command="{Binding RefreshCertificates}" Key="F5" />
                            </DataGrid.InputBindings>
                            <DataGrid.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Refresh"
                                              Command="{Binding RefreshItem}"
                                              CommandParameter="{Binding SelectedCertificate}" />
                                    <MenuItem Header="Delete"
                                              Command="{Binding Delete}"
                                              CommandParameter="{Binding SelectedCertificate}"/>
                                </ContextMenu>
                            </DataGrid.ContextMenu>
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="Thumbprint" Binding="{Binding Thumbprint}"/>
                                <DataGridTextColumn Header="Algorithm" Binding="{Binding ThumbprintAlgorithm}"/>
                                <DataGridTextColumn Header="State" Binding="{Binding State}"/>

                                <DataGridTextColumn Header="" Width="*" 
                                                    CanUserReorder="False" CanUserSort="False"/>
                            </DataGrid.Columns>
                        </DataGrid>
                    </Grid>

                </TabItem>
            </TabControl>
            <toolkit:BusyIndicator IsBusy="{Binding LeftSpinnerIsVisible}" />
            <GridSplitter Width="6" BorderBrush="DimGray" BorderThickness="1,0" VerticalAlignment="Stretch"/>
            <Grid Column="1" Visibility="{Binding JobScheduleTabIsSelected, Converter={StaticResource BVC}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <TabControl>
                    <TabItem Header="Job Schedule Details" IsSelected="{Binding JobScheduleDetailTabIsSelected}">

                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <StackPanel
                                Orientation="Horizontal">
                                <ContentControl
                                    IsEnabled="{Binding SelectedJobSchedule, Converter={StaticResource IsNotNullToBooleanConverter}}"
                                    Template="{StaticResource JobScheduleCommands}"/>
                            </StackPanel>
                            <TreeView 
                                Grid.Row="1"
                                ItemsSource="{Binding SelectedJobSchedule.PropertyModel}"
                                Resources="{StaticResource TreeViewTemplates}"
                                ItemContainerStyle="{StaticResource TreeViewItemStyle}">
                                <TreeView.CommandBindings>
                                    <StaticResource ResourceKey="TreeViewCopyCommand"/>
                                </TreeView.CommandBindings>
                            </TreeView>
                        </Grid>
                    </TabItem>
                </TabControl>
                <toolkit:BusyIndicator IsBusy="{Binding UpperRightSpinnerIsVisible}"/>
            </Grid>
            <Grid Column="1" Visibility="{Binding JobTabIsSelected, Converter={StaticResource BVC}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="3*"/>
                    <RowDefinition Height="4"/>
                    <RowDefinition Height="2*"/>
                </Grid.RowDefinitions>
                <TabControl>
                    <TabItem Header="Job Details">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <StackPanel
                                Orientation="Horizontal">
                                <ContentControl
                                    IsEnabled="{Binding SelectedJob, Converter={StaticResource IsNotNullToBooleanConverter}}"
                                    Template="{StaticResource JobCommands}"/>
                            </StackPanel>

                            <TreeView 
                                Grid.Row="1"
                                ItemsSource="{Binding SelectedJob.PropertyModel}"
                                Resources="{StaticResource TreeViewTemplates}"
                                ItemContainerStyle="{StaticResource TreeViewItemStyle}">
                                <TreeView.CommandBindings>
                                    <StaticResource ResourceKey="TreeViewCopyCommand"/>
                                </TreeView.CommandBindings>
                            </TreeView>
                        </Grid>
                    </TabItem>
                    <TabItem>
                        <TabItem.Header>
                            <TextBlock Text="{Binding Path=TasksTabTitle}"></TextBlock>
                        </TabItem.Header>
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <StackPanel
                                Orientation="Horizontal">
                                <ContentControl
                                    IsEnabled="{Binding SelectedJob, Converter={StaticResource IsNotNullToBooleanConverter}}"
                                    Template="{StaticResource JobCommands}"/>
                                <Rectangle
                                    Margin="8"
                                    VerticalAlignment="Stretch"
                                    Width="1"
                                    Fill="Black"/>
                                <ContentControl
                                    Grid.Row="0"
                                    IsEnabled="{Binding SelectedTask, Converter={StaticResource IsNotNullToBooleanConverter}}"
                                    Template="{StaticResource TaskCommands}"/>
                            </StackPanel>
                            <DataGrid 
                                Grid.Row="1"
                                ItemsSource="{Binding Path=SelectedJob.TaskCollection}"
                                SelectedItem="{Binding Path=SelectedTask}">
                                <DataGrid.InputBindings>
                                    <KeyBinding Command="{Binding RefreshItem}" CommandParameter="{Binding SelectedJob}" Key="F5" />
                                </DataGrid.InputBindings>
                                <DataGrid.ContextMenu>
                                    <ContextMenu>
                                        <MenuItem Header="Refresh"
                                              Command="{Binding RefreshItem}"
                                              CommandParameter="{Binding Path=SelectedTask}"/>
                                        <MenuItem Header="Refresh All Tasks"
                                              Command="{Binding RefreshTasks}"
                                              CommandParameter="{Binding Path=SelectedTask.ParentJob}"/>
                                        <MenuItem Header="Delete"
                                              Command="{Binding Delete}"
                                              CommandParameter="{Binding Path=SelectedTask}"/>
                                        <MenuItem Header="Terminate"
                                              Command="{Binding Terminate}"
                                              CommandParameter="{Binding Path=SelectedTask}"/>
                                    </ContextMenu>
                                </DataGrid.ContextMenu>
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Id" Binding="{Binding Id}" />
                                    <DataGridTextColumn Header="Created" Binding="{Binding CreationTime}"/>
                                    <DataGridTextColumn Header="Status" Binding="{Binding State}">
                                        <DataGridTextColumn.CellStyle>
                                            <Style TargetType="DataGridCell">
                                                <Setter Property="Foreground" Value="{Binding State, Converter={StaticResource TaskStatusColorConverter}}"/>
                                                <Setter Property="FontWeight" Value="Bold"/>
                                                <Setter Property="Background" Value="Transparent"/>
                                            </Style>
                                        </DataGridTextColumn.CellStyle>
                                    </DataGridTextColumn>
                                    <DataGridTextColumn Header="ExitCode" Binding="{Binding ExitCode}"/>
                                    <DataGridTextColumn Header="" Width="*" 
                                                    CanUserSort="False" CanUserReorder="False"/>
                                </DataGrid.Columns>
                            </DataGrid>
                        </Grid>

                    </TabItem>

                </TabControl>
                <GridSplitter Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                <toolkit:BusyIndicator IsBusy="{Binding UpperRightSpinnerIsVisible}"/>
                <Grid Grid.Row="2" Visibility="{Binding Path=SelectedTask, Converter={StaticResource NVC}}">
                    <TabControl >
                        <TabControl.InputBindings>
                            <KeyBinding Command="{Binding RefreshItem}" CommandParameter="{Binding Path=SelectedTask}" Key="F5" />
                        </TabControl.InputBindings>
                        <TabControl.Resources>
                            <Style TargetType="ListView">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
                            </Style>
                            <Style TargetType="DataGrid">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
                                <Setter Property="IsReadOnly" Value="True"/>
                                <Setter Property="AutoGenerateColumns" Value="False"/>
                                <Setter Property="SelectionMode" Value="Single"/>
                                <Setter Property="CanUserReorderColumns" Value="True"/>
                                <Setter Property="CanUserResizeColumns" Value="True"/>
                                <Setter Property="VerticalAlignment" Value="Top"/>
                                <Setter Property="RowHeaderWidth" Value="0"/>
                                <Setter Property="GridLinesVisibility" Value="None"/>
                            </Style>
                        </TabControl.Resources>
                        <TabItem Header="Task Details">
                            <TreeView 
                                ItemsSource="{Binding SelectedTask.PropertyModel}"
                                Resources="{StaticResource TreeViewTemplates}"
                                ItemContainerStyle="{StaticResource TreeViewItemStyle}">
                                <TreeView.CommandBindings>
                                    <StaticResource ResourceKey="TreeViewCopyCommand"/>
                                </TreeView.CommandBindings>
                            </TreeView>
                        </TabItem>
                        <TabItem Header="Subtasks">
                            <DataGrid ItemsSource="{Binding Path=SelectedTask.Subtasks}">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Id" Binding="{Binding Id}"/>
                                    <DataGridTextColumn Header="State" Binding="{Binding State}"/>
                                    <DataGridTextColumn Header="Node Name" Binding="{Binding NodeId}"/>
                                    <DataGridTextColumn Header="Exit Code" Binding="{Binding ExitCode}"/>
                                    <DataGridTextColumn Header="Task Root Directory" Binding="{Binding TaskRootDir}"/>
                                </DataGrid.Columns>
                            </DataGrid>
                        </TabItem>
                        <TabItem Header="Files">
                            <Grid>
                                <DataGrid ItemsSource="{Binding Path=SelectedTask.OutputFiles}"
                                          SelectedItem="{Binding Path=SelectedTask.SelectedTaskFile}"
                                          Visibility="{Binding Path=SelectedTask.HasOutputFiles, Converter={StaticResource BVC}, FallbackValue=Hidden}">
                                    <DataGrid.InputBindings>
                                        <MouseBinding
                                            MouseAction="LeftDoubleClick"
                                            Command="{Binding OpenTaskFile}"
                                            CommandParameter="{Binding SelectedTask.SelectedTaskFile/}"/>
                                    </DataGrid.InputBindings>
                                    <DataGrid.ContextMenu>
                                        <ContextMenu>
                                            <MenuItem Header="Open File"
                                                Command="{Binding OpenTaskFile}"/>
                                            <MenuItem Header="Download File"
                                                Command="{Binding DownloadTaskFile}"/>
                                        </ContextMenu>
                                    </DataGrid.ContextMenu>
                                    <DataGrid.Columns>
                                        <DataGridTextColumn Header="Name" Binding="{Binding Name}"/>
                                        <DataGridTextColumn Header="Content Size" Binding="{Binding Properties.ContentLength}"/>
                                        <DataGridTextColumn Header="Creation Time" Binding="{Binding Properties.CreationTime}"/>
                                        <DataGridTextColumn Header="Last Modified" Binding="{Binding Properties.LastModified}"/>
                                        <DataGridTextColumn Header="Path" Binding="{Binding Url}"/>
                                    </DataGrid.Columns>
                                </DataGrid>
                                <TextBlock Text="{Binding Path=SelectedTask.NoOutputFilesReason}" Margin="0,10,0,0"
                                           Visibility="{Binding Path=SelectedTask.HasOutputFiles, Converter={StaticResource IBVC}, FallbackValue=Hidden}"/>
                                <toolkit:BusyIndicator IsBusy="{Binding LowerRightSpinnerIsVisible}"/>
                            </Grid>
                        </TabItem>
                    </TabControl>
                </Grid>
            </Grid>
            <Grid Column="1" Visibility="{Binding PoolTabIsSelected, Converter={StaticResource BVC}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="2*"/>
                    <RowDefinition Height="4"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <TabControl>
                    <TabItem Header="Pool Details">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <StackPanel
                                Orientation="Horizontal">
                                <ContentControl
                                    Grid.Row="0"
                                    IsEnabled="{Binding SelectedPool, Converter={StaticResource IsNotNullToBooleanConverter}}"
                                    Template="{StaticResource PoolCommands}"/>
                            </StackPanel>
                            <TreeView 
                                Grid.Row="1"
                                ItemsSource="{Binding SelectedPool.PropertyModel}"
                                Resources="{StaticResource TreeViewTemplates}"
                                ItemContainerStyle="{StaticResource TreeViewItemStyle}">
                                <TreeView.CommandBindings>
                                    <StaticResource ResourceKey="TreeViewCopyCommand"/>
                                </TreeView.CommandBindings>
                            </TreeView>
                        </Grid>
                    </TabItem>
                    <TabItem Header="{Binding ComputeNodesTabTitle}" IsSelected="True">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <StackPanel
                                Orientation="Horizontal">
                                <ContentControl
                                    Grid.Row="0"
                                    IsEnabled="{Binding SelectedPool, Converter={StaticResource IsNotNullToBooleanConverter}}"
                                    Template="{StaticResource PoolCommands}"/>
                                <Rectangle
                                    Margin="8"
                                    VerticalAlignment="Stretch"
                                    Width="1"
                                    Fill="Black"/>
                                <ContentControl
                                    Grid.Row="0"
                                    IsEnabled="{Binding SelectedComputeNode, Converter={StaticResource IsNotNullToBooleanConverter}}"
                                    Template="{StaticResource ComputeNodeCommands}"/>
                                <Rectangle
                                    Margin="8"
                                    VerticalAlignment="Stretch"
                                    Width="1"
                                    Fill="Black"/>
                                <ContentControl
                                    Grid.Row="0"
                                    IsEnabled="{Binding SelectedComputeNode, Converter={StaticResource IsNotNullToBooleanConverter}}"
                                    Template="{StaticResource ComputeTaskCommands}"/>
                            </StackPanel>

                            <DataGrid 
                                Grid.Row="1"
                                ItemsSource="{Binding SelectedPool.ComputeNodeCollection}"
                                SelectedItem="{Binding SelectedComputeNode}">
                                <DataGrid.InputBindings>
                                    <KeyBinding Command="{Binding RefreshItem}" CommandParameter="{Binding SelectedComputeNode.ParentPool}" Key="F5" />
                                </DataGrid.InputBindings>
                                <DataGrid.ContextMenu>
                                    <ContextMenu>
                                        <MenuItem Header="Refresh"
                                            Command="{Binding RefreshItem}"
                                            CommandParameter="{Binding SelectedComputeNode}"/>
                                        <MenuItem Header="Refresh All Compute Nodes"
                                            Command="{Binding RefreshItem}"
                                            CommandParameter="{Binding SelectedComputeNode.ParentPool}"/>
                                        <MenuItem Header="Download RDP File"
                                            Command="{Binding DownloadRDP}"
                                            CommandParameter="{Binding SelectedComputeNode}"/>
                                        <MenuItem Header="Open RDP File"
                                            Command="{Binding OpenRDP}"
                                            CommandParameter="{Binding SelectedComputeNode}"/>
                                        <MenuItem Header="Get SSH Settings"
                                            Command="{Binding GetSSH}"
                                            CommandParameter="{Binding SelectedComputeNode}"/>
                                        <MenuItem Header="Reboot"
                                            Command="{Binding RebootComputeNode}"
                                            CommandParameter="{Binding SelectedComputeNode}"/>
                                        <MenuItem Header="Reimage"
                                            Command="{Binding ReimageComputeNode}"
                                            CommandParameter="{Binding SelectedComputeNode}"/>
                                        <MenuItem Header="Disable Task Scheduling"
                                            Command="{Binding DisableSchedulingComputeNode}"
                                            CommandParameter="{Binding SelectedComputeNode}"/>
                                        <MenuItem Header="Enable Task Scheduling"
                                            Command="{Binding EnableSchedulingComputeNode}"
                                            CommandParameter="{Binding SelectedComputeNode}"/>
                                        <MenuItem Header="Add User"
                                            Command="{Binding AddComputeNodeUser}"
                                            CommandParameter="{Binding SelectedComputeNode}"/>
                                        <MenuItem Header="Edit User" IsEnabled="False"
                                            Command="{Binding EditUserOnComputeNode}"
                                            CommandParameter="{Binding SelectedComputeNode}"/>
                                        <MenuItem Header="Delete User" IsEnabled="False"
                                            Command="{Binding DeleteUserFromComputeNode}"
                                            CommandParameter="{Binding SelectedComputeNode}"/>
                                    </ContextMenu>
                                </DataGrid.ContextMenu>
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Id" Binding="{Binding Id}"/>
                                    <DataGridTextColumn Header="Compute Node Allocation Time" Binding="{Binding CreationTime}"/>
                                    <DataGridTextColumn Header="Status" Binding="{Binding State}"/>
                                    <DataGridTextColumn Header="Pool" Binding="{Binding ParentPool.Id}"/>
                                    <DataGridTextColumn Header="Scheduling State" Binding="{Binding SchedulingState, Converter={StaticResource EnumToStringConverter}}"/>
                                    <DataGridTextColumn Header="" Width="*" 
                                                    CanUserReorder="False" CanUserSort="False"/>
                                </DataGrid.Columns>
                            </DataGrid>
                        </Grid>
                    </TabItem>
                </TabControl>
                <GridSplitter Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                <toolkit:BusyIndicator IsBusy="{Binding UpperRightSpinnerIsVisible}"/>
                <TabControl Grid.Row="2">
                    <TabControl.InputBindings>
                        <KeyBinding Command="{Binding RefreshItem}" CommandParameter="{Binding SelectedComputeNode}" Key="F5" />
                    </TabControl.InputBindings>
                    <TabControl.Resources>
                        <Style TargetType="ListView">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
                        </Style>
                        <Style TargetType="DataGrid">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
                            <Setter Property="IsReadOnly" Value="True"/>
                            <Setter Property="AutoGenerateColumns" Value="False"/>
                            <Setter Property="SelectionMode" Value="Single"/>
                            <Setter Property="CanUserReorderColumns" Value="True"/>
                            <Setter Property="CanUserResizeColumns" Value="True"/>
                            <Setter Property="VerticalAlignment" Value="Top"/>
                            <Setter Property="RowHeaderWidth" Value="0"/>
                            <Setter Property="GridLinesVisibility" Value="None"/>
                        </Style>
                    </TabControl.Resources>
                    <TabItem Header="Basic">
                        <TreeView 
                            ItemsSource="{Binding SelectedComputeNode.PropertyModel}"
                            Resources="{StaticResource TreeViewTemplates}"
                            ItemContainerStyle="{StaticResource TreeViewItemStyle}">
                            <TreeView.CommandBindings>
                                <StaticResource ResourceKey="TreeViewCopyCommand"/>
                            </TreeView.CommandBindings>
                        </TreeView>
                    </TabItem>
                    <TabItem Header="Recent Tasks">
                        <Grid>
                            <DataGrid 
                                    Visibility="{Binding SelectedComputeNode.HasRecentTasks, Converter={StaticResource BVC}, FallbackValue=Hidden}"
                                    ItemsSource="{Binding SelectedComputeNode.RecentTasks}">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Job Id" Binding="{Binding JobId}"/>
                                    <DataGridTextColumn Header="Task Id" Binding="{Binding TaskId}"/>
                                    <DataGridTextColumn Header="Subtask Id" Binding="{Binding SubtaskId, TargetNullValue=''}"/>
                                    <DataGridTextColumn Header="Task State" Binding="{Binding TaskState}"/>
                                    <DataGridTextColumn Header="Task URL" Binding="{Binding TaskUrl}"/>
                                    <DataGridTextColumn Header="Job Schedule Id" Binding="{Binding JobScheduleId}"/>
                                    <DataGridTextColumn Header="Start Time" Binding="{Binding ExecutionInfo.StartTime}"/>
                                    <DataGridTextColumn Header="End Time" Binding="{Binding ExecutionInfo.EndTime}"/>
                                    <DataGridTextColumn Header="Terminate Reason" Binding="{Binding ExecutionInfo.TerminateReason}"/>
                                </DataGrid.Columns>
                            </DataGrid>
                            <TextBlock Text="No Recent Tasks"
                                           Visibility="{Binding SelectedComputeNode.HasRecentTasks, Converter={StaticResource IBVC}, FallbackValue=Hidden}"
                                           VerticalAlignment="Top"/>
                        </Grid>
                    </TabItem>
                    <TabItem Header="Files">
                        <Grid>
                            <DataGrid 
                                    Visibility="{Binding SelectedComputeNode.HasFiles, Converter={StaticResource BVC}, FallbackValue=Hidden}"
                                    ItemsSource="{Binding SelectedComputeNode.Files}"
                                    SelectedItem="{Binding SelectedNodeFile}">
                                <DataGrid.InputBindings>
                                    <MouseBinding
                                            MouseAction="LeftDoubleClick"
                                            Command="{Binding OpenNodeFile}"
                                            CommandParameter="{Binding SelectedNodeFile/}"/>
                                </DataGrid.InputBindings>
                                <DataGrid.ContextMenu>
                                    <ContextMenu>
                                        <MenuItem Header="Open File"
                                                Command="{Binding OpenNodeFile}"/>
                                        <MenuItem Header="Download File"
                                                Command="{Binding DownloadNodeFile}"/>
                                    </ContextMenu>
                                </DataGrid.ContextMenu>
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Name" Binding="{Binding Name}"/>
                                    <DataGridTextColumn Header="Size" Binding="{Binding FileSize}"/>
                                    <DataGridTextColumn Header="Creation Time" Binding="{Binding CreationTime}"/>
                                    <DataGridTextColumn Header="Last Modified Time" Binding="{Binding LastModifiedTime}"/>
                                </DataGrid.Columns>
                            </DataGrid>
                            <TextBlock Text="No Files"
                                           Visibility="{Binding SelectedComputeNode.HasFiles, Converter={StaticResource IBVC}, FallbackValue=Hidden}"
                                           VerticalAlignment="Top"/>
                            <toolkit:BusyIndicator IsBusy="{Binding LowerRightSpinnerIsVisible}"/>
                        </Grid>
                    </TabItem>
                </TabControl>
            </Grid>
            <Grid Column="1" Visibility="{Binding CertificatesTabIsSelected, Converter={StaticResource BVC}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="2*"/>
                    <RowDefinition Height="4"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <TabControl>
                    <TabItem Header="Certificate Details">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <StackPanel
                                Orientation="Horizontal">
                                <ContentControl
                                    Grid.Row="0"
                                    IsEnabled="{Binding SelectedCertificate, Converter={StaticResource IsNotNullToBooleanConverter}}"
                                    Template="{StaticResource CertificateCommands}"/>
                            </StackPanel>
                            <TreeView 
                                Grid.Row="1"
                                ItemsSource="{Binding SelectedCertificate.PropertyModel}"
                                Resources="{StaticResource TreeViewTemplates}"
                                ItemContainerStyle="{StaticResource TreeViewItemStyle}">
                                <TreeView.CommandBindings>
                                    <StaticResource ResourceKey="TreeViewCopyCommand"/>
                                </TreeView.CommandBindings>
                            </TreeView>
                        </Grid>
                    </TabItem>
                </TabControl>
            </Grid>
        </Grid>
        <GridSplitter 
            Grid.Row="2" 
            Height="6" 
            BorderBrush="DimGray" 
            BorderThickness="1,0" 
            HorizontalAlignment="Stretch" 
            IsEnabled="{Binding Source={x:Static models:OptionsModel.Instance}, Path=DisplayOperationHistory}"/>
        <DataGrid 
            Grid.Row="3"
            x:Name="AsyncOperationGrid"
            ItemsSource="{Binding AsyncOperations}"
            SelectedItem="{Binding Path=SelectedAsyncOperation}"
            VerticalScrollBarVisibility="Auto"
            HorizontalScrollBarVisibility="Disabled"
            BorderBrush="Transparent"
            Margin="1"
            VerticalAlignment="Top">
            <DataGrid.InputBindings>
                <MouseBinding Gesture="LeftDoubleClick" Command="{Binding ViewAsyncOperationDetails}"/>
            </DataGrid.InputBindings>
            <DataGrid.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="Details" Command="{Binding ViewAsyncOperationDetails}"/>
                    <MenuItem Header="Clear All" Command="{Binding ClearAllAsyncOperations}"/>
                </ContextMenu>
            </DataGrid.ContextMenu>
            <DataGrid.Columns>
                <DataGridTextColumn Header="Start Time" Binding="{Binding Path=StartTimeLocal}"/>
                <DataGridTextColumn Header="Operation Number" Binding="{Binding Path=OperationNumber}"/>
                <DataGridTextColumn Header="Operation Name" Binding="{Binding Path=AsyncOperation.OperationName}"/>
                <DataGridTextColumn Header="Operation Target" Width="*" Binding="{Binding Path=AsyncOperation.OperationTarget}"/>
                <DataGridTextColumn Header="Is Completed" Binding="{Binding Path=IsCompleted}"/>
                <DataGridTextColumn Header="CompletedSuccessfully" Binding="{Binding Path=CompletedSuccessfully}"/>
            </DataGrid.Columns>
            <DataGrid.RowStyle>
                <Style TargetType="{x:Type DataGridRow}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Item.HasFault}" Value="True">
                            <Setter Property="Background" Value="Salmon"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.RowStyle>
        </DataGrid>
    </Grid>

</Window>

namespace Microsoft.Azure.Batch.Samples.TextSearch
{
    using System.Collections.Generic;
    using System.IO;
    using System.Threading.Tasks;

    /// <summary>
    /// Supports splitting a file into smaller subfiles based on line count.
    /// </summary>
    public class FileSplitter
    {
        /// <summary>
        /// Default FileSplitter constructor.
        /// </summary>
        public FileSplitter()
        {
        }

        /// <summary>
        /// Splits the file into the specified number of files.
        /// </summary>
        /// <param name="filePath">The file to split.</param>
        /// <param name="fileCount">The number of files to split the original file into.</param>
        /// <returns>The list of file names generated by splitting the original file.</returns>
        public async Task<List<string>> SplitAsync(string filePath, int fileCount)
        {
            List<string> filePaths = new List<string>();

            //Load the existing file.
            using (FileStream fileStream = new FileStream(filePath, FileMode.Open))
            {
                using (StreamReader streamReader = new StreamReader(fileStream))
                {
                    //Count the total number of lines in the original file.
                    int lineCount = 0;
                    while (!streamReader.EndOfStream)
                    {
                        ++lineCount;
                        await streamReader.ReadLineAsync();
                    }

                    //Compute the number of lines per file.
                    int linesPerFile = lineCount / fileCount;

                    streamReader.BaseStream.Seek(0, SeekOrigin.Begin);

                    //Generate each output file.
                    for(int i = 0; i < fileCount; i++)
                    {
                        string fileName = Helpers.GetSplitFileName(i);
                        
                        filePaths.Add(fileName);

                        using (FileStream newFileStream = new FileStream(fileName, FileMode.Create))
                        {
                            using (StreamWriter streamWriter = new StreamWriter(newFileStream))
                            {
                                for (int linesInCurrentFile = 0; 
                                    linesInCurrentFile < linesPerFile ||
                                    (i == fileCount - 1 && !streamReader.EndOfStream); //Write any remaining lines (due to rounding) to the last file.
                                    linesInCurrentFile++)
                                {
                                    string line = await streamReader.ReadLineAsync();

                                    await streamWriter.WriteLineAsync(line);
                                }
                            }
                        }
                    }

                }
            }

            return filePaths;
        }
    }
}
